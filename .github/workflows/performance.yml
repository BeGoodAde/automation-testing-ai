name: âš¡ Performance Monitoring

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM

jobs:
  benchmark:
    name: ðŸ“Š Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest-benchmark memory-profiler psutil
    
    - name: Run performance tests
      run: |
        python -m pytest tests/ -m "performance" --benchmark-json=benchmark.json
    
    - name: Memory profiling
      run: |
        python -c "
        import pandas as pd
        import numpy as np
        from memory_profiler import profile
        import psutil
        import os
        
        @profile
        def memory_test():
            # Simulate data processing workload
            data = pd.DataFrame({
                'id': range(10000),
                'value': np.random.randn(10000),
                'category': np.random.choice(['A', 'B', 'C'], 10000)
            })
            
            # Perform typical operations
            result = data.groupby('category').agg({
                'value': ['mean', 'std', 'count']
            })
            
            return result
        
        print('Memory usage before test:', psutil.virtual_memory().percent)
        result = memory_test()
        print('Memory usage after test:', psutil.virtual_memory().percent)
        "
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true

  load-testing:
    name: ðŸ”¥ Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install locust
    
    - name: Create load test script
      run: |
        cat > locustfile.py << EOF
        from locust import HttpUser, task, between
        import pandas as pd
        import numpy as np
        
        class DataProcessingUser(HttpUser):
            wait_time = between(1, 3)
            
            def on_start(self):
                # Simulate data processing initialization
                self.data = pd.DataFrame({
                    'id': range(1000),
                    'value': np.random.randn(1000)
                })
            
            @task
            def process_data(self):
                # Simulate data processing operations
                result = self.data.describe()
                return result
        EOF
    
    - name: Run load test
      run: |
        echo "Running simulated load test..."
        python -c "
        import time
        import pandas as pd
        import numpy as np
        from concurrent.futures import ThreadPoolExecutor
        
        def process_data():
            data = pd.DataFrame({
                'id': range(10000),
                'value': np.random.randn(10000)
            })
            return data.describe()
        
        start_time = time.time()
        with ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(process_data) for _ in range(50)]
            results = [f.result() for f in futures]
        
        end_time = time.time()
        print(f'Processed 50 datasets in {end_time - start_time:.2f} seconds')
        print(f'Average time per dataset: {(end_time - start_time)/50:.3f} seconds')
        "