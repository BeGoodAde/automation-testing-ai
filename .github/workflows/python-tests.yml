name: 🐍 Python Tests & Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly tests every Monday at 2 AM

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        pip install -r requirements.txt
    
    - name: Run Black (Code Formatting)
      run: black --check --diff .
    
    - name: Run isort (Import Sorting)
      run: isort --check-only --diff .
    
    - name: Run flake8 (Style Guide)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run mypy (Type Checking)
      run: mypy . --ignore-missing-imports || true

  test:
    name: 🧪 Test Suite (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce CI time by testing fewer combinations on non-Linux
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.9"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist  # For parallel testing
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -m "unit" -v --tb=short -n auto
    
    - name: Run integration tests
      run: |
        python -m pytest tests/ -m "integration" -v --tb=short
    
    - name: Run mock tests
      run: |
        python -m pytest tests/ -m "mock" -v --tb=short -n auto
    
    - name: Run performance tests (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        python -m pytest tests/ -m "performance" -v --tb=short
    
    - name: Generate coverage report (Linux + Python 3.11 only)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        python -m pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing --cov-report=html
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  security:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety semgrep
    
    - name: Run Bandit (Security Linter)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt || true
    
    - name: Run Safety (Dependency Vulnerability Check)
      run: |
        safety check --json --output safety-report.json || true
        safety check || true
    
    - name: Run Semgrep (SAST Analysis)
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  database-tests:
    name: 🗄️ Database Integration Tests
    runs-on: ubuntu-latest
    needs: test
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run database tests
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
      run: |
        python -m pytest tests/ -m "database" -v --tb=short

  benchmark:
    name: ⚡ Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Run benchmarks
      run: |
        python -m pytest tests/ -m "performance" --benchmark-only --benchmark-json=benchmark-report.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-report.json

## 🔧 GitHub Repository Configuration

### Repository Settings:
1. **Description**: "Advanced automation testing framework with PostgreSQL analytics and business intelligence capabilities"
2. **Topics**: automation-testing, data-analytics, postgresql, python, javascript, pytest, business-intelligence, sql-analytics
3. **License**: MIT License
4. **Enable Features**:
   - ✅ Issues
   - ✅ Projects  
   - ✅ Wiki
   - ✅ Discussions
   - ✅ Actions

### Branch Protection (for main branch):
- ✅ Require status checks to pass
- ✅ Require branches to be up to date
- ✅ Require pull request reviews
- ✅ Dismiss stale reviews
- ✅ Include administrators

### Secrets for CI/CD:
- `CODECOV_TOKEN` (if using Codecov)
- Any database credentials for testing

{
  "name": "automation-testing-framework",
  "version": "1.0.0",
  "description": "Advanced automation testing framework with PostgreSQL analytics and business intelligence",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/BeGoodAde/automation-testing-framework.git"
  },
  "author": "BeGoodAde",
  "license": "MIT",
  "homepage": "https://github.com/BeGoodAde/automation-testing-framework#readme",
  "bugs": {
    "url": "https://github.com/BeGoodAde/automation-testing-framework/issues"
  },
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:python": "python -m pytest tests/ -v",
    "test:all": "npm run test:python && npm test",
    "lint": "eslint . && flake8 .",
    "format": "prettier --write . && black .",
    "prepare": "npm run test:all",
    "start": "node index.js",
    "dev": "nodemon index.js"
  },
  "keywords": [
    "automation-testing",
    "data-analytics", 
    "postgresql",
    "business-intelligence",
    "python",
    "javascript",
    "pytest",
    "jest",
    "sql-analytics",
    "data-processing",
    "testing-framework",
    "enterprise-testing"
  ],
  "devDependencies": {
    "jest": "^29.6.2",
    "eslint": "^8.45.0",
    "prettier": "^3.0.0",
    "@babel/preset-env": "^7.22.9",
    "babel-jest": "^29.6.2",
    "nodemon": "^3.0.1"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "helmet": "^7.0.0"
  },
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=8.0.0"
  },
  "jest": {
    "testEnvironment": "node",
    "collectCoverageFrom": [
      "**/*.js",
      "!node_modules/**",
      "!coverage/**",
      "!*.config.js"
    ],
    "coverageReporters": [
      "text",
      "lcov",
      "html"
    ],
    "testMatch": [
      "**/__tests__/**/*.js",
      "**/*.test.js",
      "**/*.spec.js"
    ]
  }
}